@use 'sass:math';
@use 'sass:map';
@use 'sass:string';

@import "../../css/utils.scss";

$stats-color: $secondary-background-color;
$collection-item-color: $secondary-background-color;

$xp-color: $primary-color;
$level-circle-size: 2rem;

%number { font-family: 'Minion Pro'; }
%title  { font-family: 'Cinzel Decorative'; }
%meta   { font: bold 0.7rem 'Cinzel Decorative'; }

$dice: 'd4', 'd6', 'd8', 'd10', 'd12';

$stats: ('short': 'str', 'long': 'strength', 'debility': 'weak'),
        ('short': 'dex', 'long': 'dexterity', 'debility': 'shakey'),
        ('short': 'con', 'long': 'constitution', 'debility': 'sick'),
        ('short': 'int', 'long': 'intelligence', 'debility': 'stunned'),
        ('short': 'wis', 'long': 'wisdom', 'debility': 'confused'),
        ('short': 'cha', 'long': 'charisma', 'debility': 'scarred');

$alignments: 'chaotic', 'evil', 'good', 'lawful', 'neutral';

$moves: 'Hack and Slash', 'Volley', 'Parley', 'Aid or Interfere', 'Discern Realities', 'Spout Lore', 'Defend', 'Defy Danger',
        'Bolster', 'Carouse', 'End of Session', 'Encumbrance', 'Last Breath', 'Make Camp', 'Take Watch', 'Supply', 'Outstanding Warrants', 'Undertake a Perilous Journey', 'Recruit', 'Recover', 'Level Up';

$equipment: 'coin', 'Ragged Bow', 'Fine Bow', 'Hunter\'s Bow', 'Crossbow', 'Bundle of Arrows', 'Elven Arrows', 'Club', 'Shillelagh', 'Staff', 'Dagger', 'Shiv', 'Knife', 'Throwing Dagger', 'Short Sword', 'Axe', 'Warhammer', 'Mace', 'Spear', 'Long Sword', 'Battle Axe', 'Flail', 'Halberd', 'Rapier', 'Dueling Rapier', 'Leather Armor', 'Chainmail', 'Scale Mail', 'Plate armor', 'Shield', 'Adventuring Gear', 'Bandages', 'Poultices and Herbs', 'Healing Potion', 'Keg of Dwarven Stout', 'Bag of Books', 'Antitoxin', 'Dungeon Rations', 'Personal Feast', 'Dwarven Hardtack', 'Elven Bread', 'Halfling Pipeleaf', 'Oil of Tagit', 'Bloodweed', 'Goldenroot', 'Serpent’s Tears', 'Some token of where you’ve traveled or where you’re from';

.dungeon-world.core {
  .field[name='trigger'], .field[name='procedure'] { @extend %invisible; }
}

.home.page .character.dungeon-world-core {
  position: relative;
  @extend %game-badge;

  &::before { background-image: url('./images/symbol.jpg'); }

  display: grid;
  grid-template: 1fr 1fr / 0fr 0fr 1fr;
  grid-column-gap: $small-gap;
  grid-template-areas:
    "name name name"
    "level race class";

  > .field { @extend %invisible; }

  > .field[name=name] {
    grid-area: name;
    @extend %visible, %title, %show-value;
  }

  > .field[name=level] {
    grid-area: level;
    @extend %visible, %meta, %show-value;
    min-width: max-content;
    &::before { content: 'lvl. '; }
  }

  > .field[name=race] {
    grid-area: race;
    @extend %visible, %meta, %show-value;
  }

  > .field[name=playbook] {
    @extend %visible, %meta, %show-value;
    grid-area: class;
  }

  .settings { @extend %invisible; }

  &.thief {
    @extend %exact-background;
    background-image: url('./images/classes-icons/thief.png');
    background-position: right;
    background-color: #3f2167;
    color: white;
  }
}

.new.page {
  .choose.game .field[value*='dungeon-world'] {
    @extend %exact-background;
    background: url('./images/banner.jpg');
  }

 .dungeon-world.core .playbook .field {
    @extend %round, %show-value, %title;
    height: 5rem;
    margin: $large-gap;
    background: white;

    &::after { margin: $large-gap; }
  }

  &.dungeon-world.core {
    .choice.name .recommendations .options {
      display: grid;
      grid-template-columns: 1fr 1fr;
    }

    .assignment.choice.stat {
      .source, .target {
        > * {
          @extend %round;
          width: 5rem;
        }
      }

      .source {
        align-items: flex-start;
      }

      .target {
        align-items: flex-end;
      }
    }
  }
}

.character.page > .character.dungeon-world-core {
  @extend %page-size;

  display: grid;
  grid-template: 2.5rem repeat(12, 1fr) 2.5rem / repeat(3, 1fr) 5.5rem;
  gap: $small-gap;
  padding-left: $small-gap;
  padding-bottom: $small-gap;
  grid-template-areas:
    "name name name xp"
    "description description description strength"
    "playbook race alignment strength"
    "playbook race alignment dexterity"
    "bonds holds modifiers dexterity"
    "damage armor hp constitution"
    "damage armor hp constitution"
    "moves moves moves intelligence"
    "moves moves moves intelligence"
    "moves moves moves wisdom"
    "load load load wisdom"
    "gear gear gear charisma"
    "gear gear gear charisma"
    "gear gear gear settings";

  > .field {
    @extend %invisible;
    position: relative;
  }

  // -------------------- header --------------------

  > .field[name=name] {
    grid-area: name;
    @extend %flex-visible, %title, %show-value;
    margin-left: $large-gap;
    line-height: 2.5rem;
    color: white;
  }

  .back {
    grid-area: name;
    width: min-content;
    margin-top: 0.5rem;
    margin-left: -0.25rem;
  }

  > .field[name=xp], > .field[name=level], > .field[name='level up allowed'] {
    @extend %flex-visible;
    grid-area: xp;
  }

  > .field[name=xp] {
    @extend %round, %show-value;
    display: flex;
    justify-content: left;
    align-items: center;
    margin-left: $small-gap;
    margin-top: $small-gap;
    color: white;

    &::before {
      @extend %round;
      content: '';
      position: absolute;
      margin-left: -0.5rem;
      width: calc(#{$full} - #{$level-circle-size});
      height: 50%;
      padding-left: $level-circle-size;
      background: $xp-color;
    }

    &:after {
      position: absolute;
      z-index: 1;
      padding-left: 1.8rem;
      line-height: 1rem;
    }
  }

  > .field[name=level] {
    @extend %show-value, %round;
    margin-bottom: $small-gap;
    margin-top: $large-gap;
    margin-right: $small-gap;
    background: black;
    color: white;

    &::after {
      @extend %centering, %square;
      z-index: 1;
      height: 200%;
      margin-top: -12.5%;
      margin-left: #{math.div($level-circle-size, -2)};
      border: 2px solid $xp-color;
      background: $background-color;
      width: $level-circle-size;
      border-radius: $level-circle-size;
    }
  }

  @for $lvl from 1 through 20 {
    @for $xp from 0 through $lvl+6 {
      > .field[name=level][value='#{$lvl}'] ~ .field[name=xp][value='#{$xp}']::before {
        width: calc(#{math.div($xp, $lvl+7)*100}% - #{math.div($xp, $lvl+7)*2}rem);
      }
    }
  }

  > .field[name='level up allowed'][value=true] {
    display: flex;
    justify-content: left;
    align-items: center;
    margin-left: $small-gap;
    margin-top: $small-gap;
    color: white;

    &::before {
      @extend %round;
      content: '';
      position: absolute;
      margin-left: -0.5rem;
      width: calc(#{$full} - #{$level-circle-size});
      height: 50%;
      padding-left: $level-circle-size;
      box-shadow: #8c7600 0px 0px 3px 2px;
    }

    &::after {
      @extend %square;
      content: '';
      z-index: 1;
      height: $full;
      margin-left: calc(#{math.div($level-circle-size, -2)} - 0.5rem);
      border: 2px solid $xp-color;
      background: none;
      width: $level-circle-size;
      border-radius: $level-circle-size;
      box-shadow: #8c7600 0px 0px 3px 2px;
    }
  }

  // -------------------- stats --------------------

  @each $stat in $stats {
    $short:     map.get($stat, 'short');
    $long:      map.get($stat, 'long');
    $debility:  map.get($stat, 'debility');

    > .field[name=#{$short}], > .field[name=#{$long}], > .field[name=#{$debility}] { grid-area: string.unquote($long); }

    > .field[name=#{$long}] {
      @extend %flex-visible, %show-name, %show-value;
      background: $stats-color;
      color: white;
      border-radius: 1rem 0 0 1rem;
      $padding: 0.2rem;

      &::before {
        @extend %title;
        font-size: 0.6rem;
        position: absolute;
        text-transform: uppercase;
        bottom: $padding;
        text-align: center;
        width: $full;
      }

      &::after {
        @extend %number;
        font-size: 1rem;
        position: absolute;
        top: 0;
        right: $padding;
      }
    }

    > .field[name=#{$short}] {
      @extend %flex-visible, %centering, %show-value, %number;
      font-size: 3rem;
      color: white;
      z-index: 1;
    }

    > .field[name=#{$debility}] {
      @extend %flex-visible, %content-size, %stamp;
      &[value='true'] { @extend %show-name; }
    }
  }

  // -------------------- information --------------------

  > .field[name=description] {
    @extend %flex-visible, %show-value, %oneline;
    grid-area: description;
    color: white;
    text-align: justify;
    line-height: 1em;
    margin-top: -#{$large-gap};
    padding-left: $large-gap;
    display: inline-block;
  }

  > .field[name=look] {
    @extend %flex-visible, %show-value, %oneline;
    grid-area: description;
    color: white;
    padding-top: $small-gap;
    padding-left: $large-gap;
  }

  > .field[name=playbook], > .field[name=race], > .field[name=alignment] {
    @extend %flex-visible, %show-value, %full-size, %centering, %title, %oneline;
    flex-direction: column;
    gap: $tiny-gap;
    color: white;
    text-transform: uppercase;

    &::before {
      content: '';
      width: $full;
      flex: 1;
    }
  }

  > .field[name=playbook] {
    grid-area: playbook;
  }

  > .field[name=race] {
    grid-area: race;
  }

  > .field[name=alignment] {
    grid-area: alignment;

    // @each $alignment in $alignments {
    //   &[value='#{$alignment}']::before {
    //     @extend %exact-background;
    //     background-image: url('./images/alignment/#{$alignment}.png');
    //   }
    // }
  }

  %collection-button {
    @extend %centering, %round, %inverted, %flex-visible, %title;
    background: $secondary-background-color;
    color: white;
    padding: $small-gap;
    > .field[name=length] {
      @extend %show-value, %number;
      margin-right: 0.5rem;
    }
  }

  > .field[name=bonds] {
    @extend %collection-button;
    grid-area: bonds;
    &::after { content: 'bonds'; }
  }

  > .field[name=holds] {
    @extend %collection-button;
    grid-area: holds;
    &::after { content: 'holds'; }
  }

  > .field[name=modifiers] {
    @extend %collection-button;
    grid-area: modifiers;
    &::after { content: 'mods'; }
  }

  // -------------------- main stats --------------------

  > .field[name=damage-formula],
  > .field[name=armor], 
  > .field[name=hp],
  > .field[name='max hp'] {
    @extend %flex-visible, %centering, %number, %show-value;
    padding: $small-gap;
    color: white;

    &::after { @extend %number; }
  }

  > .field[name=damage-formula] {
    grid-area: damage;
    font-size: 1.5rem;
    text-transform: uppercase;

    @each $die in $dice {
      &[value=#{$die}] {
        @extend %exact-background;
        background-image: url('./images/dice/#{$die}.png');
        margin: 0.7rem;
      }
    }
  }

  > .field[name=armor] {
    @extend %exact-background;
    grid-area: armor;
    font-size: 2rem;
    color: black;
    background-image: url('./images/armor.png');
  }

  > .field[name=hp],
  > .field[name='max hp'] {
    grid-area: hp;
    color: black !important;
    &::after {
      font-size: 2rem;
      z-index: 1;
      text-align: center;
      width: 50%;
    }
  }

  > .field[name=hp] {
    justify-content: right;
  }

  > .field[name='max hp'] {
    @extend %exact-background;
    justify-content: left;
    background-image: url('./images/hp.png');
  }

  // -------------------- collections --------------------

  > .field[name=moves], > .field[name=gear] {
    @extend %flex-visible, %scrollx;
    padding: $small-gap;
    background: $box-background;
    gap: $small-gap;

    > * {
      @extend %square, %round;
      flex: 10 0 auto;
      background: $collection-item-color;

      &[name=length] { display: none; }
    }

    .field[name=name] {
      @extend %show-value;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
      text-align: center;
      height: $full;
      padding: $small-gap;

      &::before {
        @extend %exact-background;
        content: '';
        width: $full;
        height: $full;
      }

      &::after {
        @extend %title;
        font-size: 0.7rem;
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
        width: $full;
        text-align: center;
        color: white;
      }
    }
  }

  > .field[name=moves] {
    grid-area: moves;
    @each $move in $moves {
      .field[name=name] {
        &[value='#{$move}']::before {
          background-image: url('./images/moves/#{$move}.png');
        }
      }
    }
  }

  > .field[name=gear] {
    grid-area: gear;

    // @each $gear in $equipment {
    //   .field[name=name] {
    //     &[value='#{$gear}']::before {
    //       background-image: url('./images/equipment/#{$gear}.png');
    //     }
    //   }
    // }
  }

  // -------------------- settings --------------------

  .settings {
    grid-area: settings;
    color: white;
    float: right;
    margin-left: $large-gap;
    font-size: 1.5rem;
    width: min-content;
  }

  .notes {
    grid-area: settings;
    color: white;
    float: left;
    margin-left: calc(2.25rem + #{$large-gap});
    font-size: 1.5rem;
    width: min-content;
  }
}
